/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2012-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Los Alamos National Security, LLC.  All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/datatype/ompi_datatype.h"
#include "ompi/memchecker.h"

/*
 * TODO:BIGCOUNT this file will need to be updated once
 * the datatype framework supports bigcount 
 */

PROTOTYPE ERROR_CLASS type_create_hindexed_block(COUNT count,
                                                 COUNT blocklength,
                                                 AINT_COUNT_ARRAY array_of_displacements,
                                                 DATATYPE oldtype,
                                                 DATATYPE_OUT newtype)
{
    int rc;
    MPI_Aint *iarray_of_displacements = NULL;

    MEMCHECKER(
        memchecker_datatype(oldtype);
        );

    if( MPI_PARAM_CHECK ) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);
        if( count < 0 ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_COUNT,
                                          FUNC_NAME);
        } else if( (count > 0) && (blocklength < 0 || NULL == array_of_displacements) ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG,
                                          FUNC_NAME );
        } else if (NULL == oldtype || MPI_DATATYPE_NULL == oldtype ||
                   NULL == newtype) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE,
                                          FUNC_NAME );
        }
#if OMPI_BIGCOUNT_SRC
        OMPI_CHECK_MPI_COUNT_INT_CONVERSION_OVERFLOW(rc, count);
        if (OMPI_SUCCESS != rc) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(rc, FUNC_NAME);
        }
#endif
    }

#if OMPI_BIGCOUNT_SRC
    iarray_of_displacements = (MPI_Aint *)malloc(count * sizeof(MPI_Aint));
    if (NULL == iarray_of_displacements) {
        return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_NO_MEM, FUNC_NAME);
    }
    for (int ii = 0; ii < (int)count; ii++) {
        iarray_of_displacements[ii] = (MPI_Aint)array_of_displacements[ii];
    }
#else
    iarray_of_displacements = (MPI_Aint *)array_of_displacements;
#endif

    rc = ompi_datatype_create_hindexed_block( count, blocklength, iarray_of_displacements,
                                              oldtype, newtype );
    if( rc != MPI_SUCCESS ) {
        ompi_datatype_destroy( newtype );
        OMPI_ERRHANDLER_NOHANDLE_RETURN( rc, rc, FUNC_NAME );
    }
    {
        const int* a_i[2] = {(int *)&count, (int *)&blocklength};
        ompi_datatype_set_args( *newtype, 2, a_i, count, iarray_of_displacements, 1, &oldtype,
                                MPI_COMBINER_HINDEXED_BLOCK );
    }
#if OMPI_BIGCOUNT_SRC
    free(iarray_of_displacements);
#endif

    return MPI_SUCCESS;
}
