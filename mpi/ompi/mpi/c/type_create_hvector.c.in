/* -*- Mode: C; c-basic-offset:4 ; indent-tabs-mode:nil -*- */
/*
 * Copyright (c) 2004-2007 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2020 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2008 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2013      Los Alamos National Security, LLC.  All rights
 *                         reserved.
 * Copyright (c) 2015      Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

#include "ompi_config.h"

#include "ompi/mpi/c/bindings.h"
#include "ompi/runtime/params.h"
#include "ompi/communicator/communicator.h"
#include "ompi/errhandler/errhandler.h"
#include "ompi/datatype/ompi_datatype.h"
#include "ompi/memchecker.h"

/*
 * TODO:BIGCOUNT this file will need to be updated once
 * the datatype framework supports bigcount 
 */

PROTOTYPE ERROR_CLASS type_create_hvector(COUNT count,
                                          COUNT blocklength,
                                          AINT_COUNT stride,
                                          DATATYPE oldtype,
                                          DATATYPE_OUT newtype)
{
    int rc;

    MEMCHECKER(
        memchecker_datatype(oldtype);
        );

    if( MPI_PARAM_CHECK ) {
        OMPI_ERR_INIT_FINALIZE(FUNC_NAME);
        if( count < 0 ) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_COUNT,
                                          FUNC_NAME );
        } else if( blocklength < 0) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_ARG,
                                          FUNC_NAME );
        } else if (NULL == oldtype || MPI_DATATYPE_NULL == oldtype ||
                   NULL == newtype) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(MPI_ERR_TYPE,
                                          FUNC_NAME );
        }
#if OMPI_BIGCOUNT_SRC
        OMPI_CHECK_MPI_COUNT_INT_CONVERSION_OVERFLOW(rc, count);
        if (OMPI_SUCCESS != rc) {
            return OMPI_ERRHANDLER_NOHANDLE_INVOKE(rc, FUNC_NAME);
        }
#endif
    }

    rc = ompi_datatype_create_hvector ( count, blocklength, stride, oldtype,
                                        newtype );
    OMPI_ERRHANDLER_NOHANDLE_CHECK(rc, rc, FUNC_NAME );

    {
        const int* a_i[2] = {(int *)&count, (int *)&blocklength};
        MPI_Aint a_a[1] = {stride};

        ompi_datatype_set_args( *newtype, 2, a_i, 1, a_a, 1, &oldtype, MPI_COMBINER_HVECTOR );
    }

    return MPI_SUCCESS;
}
