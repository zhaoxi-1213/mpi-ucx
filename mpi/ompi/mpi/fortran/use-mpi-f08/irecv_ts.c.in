/*
 * Copyright (c) 2004-2005 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2005 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2011-2012 Cisco Systems, Inc.  All rights reserved.
 * Copyright (c) 2015-2019 Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

PROTOTYPE void irecv(BUFFER_OUT x, COUNT count, DATATYPE datatype,
                     RANK source, TAG tag, COMM comm,
                     REQUEST_OUT request)
{
    int c_ierr;
    MPI_Datatype c_datatype, c_type = PMPI_Type_f2c(*datatype);
    MPI_Request c_req;
    MPI_Comm c_comm = PMPI_Comm_f2c (*comm);
    void *buf = OMPI_CFI_BASE_ADDR(x);
    @COUNT_TYPE@ c_count = (@COUNT_TYPE@) *count;

    OMPI_CFI_2_C(x, c_count, c_type, c_datatype, c_ierr);
    if (MPI_SUCCESS != c_ierr) {
        if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
        OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME);
        return;
    }

    c_ierr = @INNER_CALL@(OMPI_F2C_BOTTOM(buf), c_count,
                          c_datatype, OMPI_FINT_2_INT(*source),
                          OMPI_FINT_2_INT(*tag), c_comm, &c_req);
    if (c_datatype != c_type) {
        ompi_datatype_destroy(&c_datatype);
    }

    if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);

    if (MPI_SUCCESS == c_ierr) {
       *request = PMPI_Request_c2f(c_req);
    }
}
