/*
 * Copyright (c) 2004-2005 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2021 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2011-2012 Cisco Systems, Inc.  All rights reserved.
 * Copyright (c) 2015-2021 Research Organization for Information Science
 *                         and Technology (RIST).  All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

PROTOTYPE VOID alltoallw_init(BUFFER_ASYNC x1, COUNT_ARRAY sendcounts,
                              DISP_ARRAY sdispls, DATATYPE_ARRAY sendtypes,
                              BUFFER_ASYNC_OUT x2, COUNT_ARRAY recvcounts,
                              DISP_ARRAY rdispls, DATATYPE_ARRAY recvtypes,
                              COMM comm, INFO info, REQUEST_OUT request)
{
    MPI_Comm c_comm;
    MPI_Datatype *c_sendtypes = NULL, *c_recvtypes;
    MPI_Info c_info;
    MPI_Request c_request;
    int size, idx = 0, c_ierr;
    char *sendbuf = OMPI_CFI_BASE_ADDR(x1), *recvbuf = OMPI_CFI_BASE_ADDR(x2);
    @COUNT_TYPE@ *tmp_sendcounts = NULL;
    @DISP_TYPE@ *tmp_sdispls = NULL;
    @COUNT_TYPE@ *tmp_recvcounts = NULL;
    @DISP_TYPE@ *tmp_rdispls = NULL;

    c_comm = PMPI_Comm_f2c(*comm);
    c_info = PMPI_Info_f2c(*info);

    OMPI_CFI_CHECK_CONTIGUOUS(x1, c_ierr);
    if (MPI_SUCCESS != c_ierr) {
        if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
        OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME)
        return;
    }
    OMPI_CFI_CHECK_CONTIGUOUS(x2, c_ierr);
    if (MPI_SUCCESS != c_ierr) {
        if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
        OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME)
        return;
    }

    size = OMPI_COMM_IS_INTER(c_comm)?ompi_comm_remote_size(c_comm):ompi_comm_size(c_comm);

    if (!OMPI_IS_FORTRAN_IN_PLACE(sendbuf)) {
        c_sendtypes = (MPI_Datatype *) malloc(size * sizeof(MPI_Datatype));
        OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(sendcounts, tmp_sendcounts, size);
        OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(sdispls, tmp_sdispls, size);
        for (int i=0; i<size; i++) {
            c_sendtypes[i] = PMPI_Type_f2c(sendtypes[i]);
        }
    }

    c_recvtypes = (MPI_Datatype *) malloc(size * sizeof(MPI_Datatype));
    OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(recvcounts, tmp_recvcounts, size);
    OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(rdispls, tmp_rdispls, size);
    for (int i=0; i<size; i++) {
        c_recvtypes[i] = PMPI_Type_f2c(recvtypes[i]);
    }

    sendbuf = (char *) OMPI_F2C_IN_PLACE(sendbuf);
    sendbuf = (char *) OMPI_F2C_BOTTOM(sendbuf);
    recvbuf = (char *) OMPI_F2C_BOTTOM(recvbuf);

    c_ierr = @INNER_CALL@(sendbuf,
                          tmp_sendcounts,
                          tmp_sdispls,
                          c_sendtypes,
                          recvbuf,
                          tmp_recvcounts,
                          tmp_rdispls,
                          c_recvtypes, c_comm, c_info, &c_request);
    if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
    if (MPI_SUCCESS == c_ierr) {
        *request = PMPI_Request_c2f(c_request);
        if (NULL != c_sendtypes) {
            free(c_sendtypes);
        }
        free(c_recvtypes);
    }
    OMPI_FORTRAN_BIGCOUNT_ARRAY_CLEANUP_NONBLOCKING(sendcounts, tmp_sendcounts, c_request, c_ierr, idx);
    OMPI_FORTRAN_BIGCOUNT_ARRAY_CLEANUP_NONBLOCKING(sdispls, tmp_sdispls, c_request, c_ierr, idx);
    OMPI_FORTRAN_BIGCOUNT_ARRAY_CLEANUP_NONBLOCKING(recvcounts, tmp_recvcounts, c_request, c_ierr, idx);
    OMPI_FORTRAN_BIGCOUNT_ARRAY_CLEANUP_NONBLOCKING(rdispls, tmp_rdispls, c_request, c_ierr, idx);
}
