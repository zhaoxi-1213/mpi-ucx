/*
 * Copyright (c) 2004-2005 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2005 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2005 High Performance Computing Center Stuttgart,
 *                         University of Stuttgart.  All rights reserved.
 * Copyright (c) 2004-2005 The Regents of the University of California.
 *                         All rights reserved.
 * Copyright (c) 2011-2012 Cisco Systems, Inc.  All rights reserved.
 * Copyright (c) 2015-2019 Research Organization for Information Science
 *                         and Technology (RIST). All rights reserved.
 * Copyright (c) 2018      FUJITSU LIMITED.  All rights reserved.
 * Copyright (c) 2024      Triad National Security, LLC. All rights
 *                         reserved.
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 */

PROTOTYPE VOID iscatterv(BUFFER_ASYNC x1, COUNT_ARRAY sendcounts,
                         DISP_ARRAY displs, DATATYPE sendtype,
                         BUFFER_ASYNC_OUT x2, COUNT recvcount,
                         DATATYPE recvtype, RANK root,
                         COMM comm, REQUEST_OUT request)
{
    int c_ierr, idx = 0;
    MPI_Comm c_comm = PMPI_Comm_f2c(*comm);
    int c_root = OMPI_FINT_2_INT(*root);
    MPI_Datatype  __opal_attribute_unused__ c_recvdatatype = MPI_DATATYPE_NULL;
    MPI_Datatype c_sendtype = MPI_DATATYPE_NULL, c_recvtype = MPI_DATATYPE_NULL;
    @COUNT_TYPE@ c_recvcount = (@COUNT_TYPE@)*recvcount;
    char *sendbuf = OMPI_CFI_BASE_ADDR(x1), *recvbuf = OMPI_CFI_BASE_ADDR(x2);
    MPI_Request c_request;
    @COUNT_TYPE@ *tmp_sendcounts = NULL;
    @DISP_TYPE@ *tmp_displs = NULL;

    if (OMPI_COMM_IS_INTER(c_comm)) {
        if (MPI_ROOT == c_root) {
            int size = ompi_comm_size(c_comm);
            c_sendtype = PMPI_Type_f2c(*sendtype);
            OMPI_CFI_CHECK_CONTIGUOUS(x1, c_ierr);
            if (MPI_SUCCESS != c_ierr) {
                if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
                OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME);
                return;
            }
            OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(sendcounts, tmp_sendcounts, size);
            OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(displs, tmp_displs, size);
        } else if (MPI_PROC_NULL != c_root) {
            c_recvtype = PMPI_Type_f2c(*recvtype);
            OMPI_CFI_2_C(x2, c_recvcount, c_recvtype, c_recvdatatype, c_ierr);
            if (MPI_SUCCESS != c_ierr) {
                if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
                OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME);
                return;
            }
        }
    } else {
        if (ompi_comm_rank(c_comm) == c_root) {
            int size = ompi_comm_size(c_comm);
            c_sendtype = PMPI_Type_f2c(*sendtype);
            OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(sendcounts, tmp_sendcounts, size);
            OMPI_FORTRAN_BIGCOUNT_ARRAY_SET(displs, tmp_displs, size);
            OMPI_CFI_CHECK_CONTIGUOUS(x1, c_ierr);
            if (MPI_SUCCESS != c_ierr) {
                if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
                OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME);
                return;
            }
        }
        if (OMPI_IS_FORTRAN_IN_PLACE(recvbuf)) {
            recvbuf = MPI_IN_PLACE;
        } else {
            c_recvtype = PMPI_Type_f2c(*recvtype);
            OMPI_CFI_2_C(x2, c_recvcount, c_recvtype, c_recvdatatype, c_ierr);
            if (MPI_SUCCESS != c_ierr) {
                if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
                OMPI_ERRHANDLER_INVOKE(c_comm, c_ierr, FUNC_NAME);
                return;
            }
        }
    }

    recvbuf = (char *) OMPI_F2C_IN_PLACE(recvbuf);
    recvbuf = (char *) OMPI_F2C_BOTTOM(recvbuf);

    c_ierr = @INNER_CALL@(sendbuf,
                          tmp_sendcounts,
                          tmp_displs,
                          c_sendtype,
                          recvbuf,
                          c_recvcount,
                          (c_recvdatatype == MPI_DATATYPE_NULL) ? c_recvtype : c_recvdatatype,
                          c_root, c_comm, &c_request);
    if (c_recvdatatype != MPI_DATATYPE_NULL && c_recvdatatype != c_recvtype) {
        ompi_datatype_destroy(&c_recvdatatype);
    }

    if (NULL != ierr) *ierr = OMPI_INT_2_FINT(c_ierr);
    if (MPI_SUCCESS == c_ierr) *request = PMPI_Request_c2f(c_request);

    OMPI_FORTRAN_BIGCOUNT_ARRAY_CLEANUP_NONBLOCKING(sendcounts, tmp_sendcounts, c_request, c_ierr, idx);
    OMPI_FORTRAN_BIGCOUNT_ARRAY_CLEANUP_NONBLOCKING(displs, tmp_displs, c_request, c_ierr, idx);
}
