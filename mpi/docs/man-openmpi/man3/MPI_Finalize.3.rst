.. _mpi_finalize:

MPI_Finalize
============

.. include_body

:ref:`MPI_Finalize` |mdash| Terminates MPI world model.

.. The following file was automatically generated
.. include:: ./bindings/mpi_finalize.rst

OUTPUT PARAMETER
----------------

* ``ierror`` : Fortran only: Error status (integer).

DESCRIPTION
-----------

This routine finalizes the MPI world model.  If the MPI world model
has been initialized in an MPI process, it *must* be finalized exactly
once by invoking this routine during the lifetime of that MPI process.
This is different than the MPI session model, which can be initialized
and finalized multiple times in an MPI process.  See
:ref:`MPI_Session_init` and :ref:`MPI_Session_finalize`.

Unless there has been a call to :ref:`MPI_Abort`, you must
ensure that all pending communications in the MPI world model
involving a process are complete before the process calls
:ref:`MPI_Finalize`. If the call returns, each process may either
continue local computations or exit without participating in further
communication with other processes in the MPI world model. At the
moment when the last process calls :ref:`MPI_Finalize`, all pending
sends in the MPI world model must be matched by a receive, and all
pending receives in the MPI world model must be matched by a send.

See `MPI-5.0:11.4.1 <https://www.mpi-forum.org/>`_ for a list of MPI
functionality that is available (e.g., even when the MPI
world model has not yet initialized or has already been finalized).

:ref:`MPI_Finalize` is collective over all connected processes. If no
processes were spawned, accepted, or connected, then this means it is
collective over ``MPI_COMM_WORLD``. Otherwise, it is collective over
the union of all processes that have been and continue to be
connected.

NOTES
-----

The MPI session model is different than the MPI world model, and has
different scopes of availability for MPI functionality.  See
:ref:`MPI_Session_init` and :ref:`MPI_Session_finalize`.

All processes that initialized the MPI world model must call this
routine before exiting.  All processes will still exist but may not
make any further MPI calls in the MPI world model. :ref:`MPI_Finalize`
guarantees that all local actions required by communications in the
MPI world model that the user has completed will, in fact, occur
before it returns. However, :ref:`MPI_Finalize` guarantees nothing
about pending communications in the MPI world model that have not been
completed; completion is ensured only by the :ref:`MPI_Wait` and
:ref:`MPI_Test` variants, or :ref:`MPI_Request_free` combined with
some other verification of completion.

For example, a successful return from a blocking communication
operation or from one of the :ref:`MPI_Wait` or :ref:`MPI_Test`
varients means that the communication is completed by the user and the
buffer can be reused, but does not guarantee that the local process
has no more work to do. Similarly, a successful return from
:ref:`MPI_Request_free` with a request handle generated by an
:ref:`MPI_Isend` nullifies the handle but does not guarantee that the
operation has completed. The :ref:`MPI_Isend` is complete only when a
matching receive has completed.

If you would like to cause actions to happen when a process finalizes the MPI
world model, attach an attribute to ``MPI_COMM_SELF`` with a callback
function. Then, when :ref:`MPI_Finalize` is called, it will first
execute the equivalent of an :ref:`MPI_Comm_free` on
``MPI_COMM_SELF``. This will cause the delete callback function to be
executed on all keys associated with ``MPI_COMM_SELF`` in an arbitrary
order. If no key has been attached to ``MPI_COMM_SELF``, then no
callback is invoked. This freeing of ``MPI_COMM_SELF`` happens before
any other parts of the MPI world model are affected. Calling
:ref:`MPI_Finalized` will thus return ``false`` in any of these
callback functions. Once you have done this with ``MPI_COMM_SELF``,
the results of :ref:`MPI_Finalize` are not specified.

ERRORS
------

.. include:: ./ERRORS.rst

.. seealso::
   * :ref:`MPI_Finalized`
   * :ref:`MPI_Init`
   * :ref:`MPI_Initialized`
   * :ref:`MPI_Session_init`
   * :ref:`MPI_Session_finalize`
